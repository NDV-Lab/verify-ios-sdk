// Generated by Apple Swift version 2.2 (swiftlang-703.0.18.1 clang-703.0.29)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if defined(__has_include) && __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
# if defined(__has_feature) && __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if defined(__has_feature) && __has_feature(modules)
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"


/// Contains core information relevant to all Nexmo services
SWIFT_CLASS("_TtC12VerifyIosSdk11NexmoClient")
@interface NexmoClient : NSObject

/// Start the NexmoClient. This is required for all other Nexmo Clients, e.g. VerifyClient
///
/// \param applicationId your application id/key
///
/// \param sharedSecretKey your shared secret key
+ (void)startWithApplicationId:(NSString * _Nonnull)applicationId sharedSecretKey:(NSString * _Nonnull)sharedSecretKey;

/// Start the NexmoClient. This is required for all other Nexmo Clients, e.g. VerifyClient
///
/// \param applicationId your application id/key
///
/// \param sharedSecretKey your shared secret key
///
/// \param gcmToken Google Cloud Messaging registration token of the device. Used for Verification via push notification.
+ (void)startWithApplicationId:(NSString * _Nonnull)applicationId sharedSecretKey:(NSString * _Nonnull)sharedSecretKey gcmToken:(NSString * _Nonnull)gcmToken;

/// Set the Google Cloud Messaging registration token in the Nexmo Client to enable verification via push notification.
///
/// \param gcmToken The Google Cloud Messaging registration token
+ (void)setGcmToken:(NSString * _Nonnull)gcmToken;
@end



/// Status of current user in verification process
SWIFT_CLASS("_TtC12VerifyIosSdk10UserStatus")
@interface UserStatus : NSObject
+ (NSString * _Nonnull)USER_UNKNOWN;
+ (void)setUSER_UNKNOWN:(NSString * _Nonnull)value;
+ (NSString * _Nonnull)USER_ERROR;
+ (void)setUSER_ERROR:(NSString * _Nonnull)value;
+ (NSString * _Nonnull)USER_NEW;
+ (void)setUSER_NEW:(NSString * _Nonnull)value;
+ (NSString * _Nonnull)USER_PENDING;
+ (void)setUSER_PENDING:(NSString * _Nonnull)value;
+ (NSString * _Nonnull)USER_VERIFIED;
+ (void)setUSER_VERIFIED:(NSString * _Nonnull)value;
+ (NSString * _Nonnull)USER_FAILED;
+ (void)setUSER_FAILED:(NSString * _Nonnull)value;
+ (NSString * _Nonnull)USER_EXPIRED;
+ (void)setUSER_EXPIRED:(NSString * _Nonnull)value;
+ (NSString * _Nonnull)USER_BLACKLISTED;
+ (void)setUSER_BLACKLISTED:(NSString * _Nonnull)value;
+ (NSString * _Nonnull)USER_UNVERIFIED;
+ (void)setUSER_UNVERIFIED:(NSString * _Nonnull)value;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

enum VerifyError : NSInteger;
@class NSError;
@protocol VerifyUIDelegate;


/// Contains all verification commands available within the Nexmo Verify Service
SWIFT_CLASS("_TtC12VerifyIosSdk12VerifyClient")
@interface VerifyClient : NSObject

/// Attempt to verify a user using Nexmo's Verify Service. Once the verification process has been started, updates on its progress will be relayed through the callbacks provided.
///
/// To check if a user's verification pin code is correct, a subsequent call to checkPinCode should be
/// initiated, along with the code provided by the user.
///
/// \param countryCode the ISO 3166-1 alpha-2 two-letter country code
///
/// \param phoneNumber the local phone number/msisdn of the mobile to verify
///
/// \param onVerifyInProgress callback triggered when a verification process has been successfully triggered
///
/// \param onUserVerified callback triggered when a user has been successfully verified
///
/// \param onError callback triggered when some error has occurred, e.g. wrong pin entered
+ (void)getVerifiedUserWithCountryCode:(NSString * _Nullable)countryCode phoneNumber:(NSString * _Nonnull)phoneNumber verifyInProgressBlock:(void (^ _Nonnull)(void))onVerifyInProgress userVerifiedBlock:(void (^ _Nonnull)(void))onUserVerified errorBlock:(void (^ _Nonnull)(enum VerifyError))onError;

/// Check whether a pin code (ususally entered by the user) is the correct verification code.
///
/// Note: This command is only useful if a verification request is in progress, otherwise the command
/// will simply quit and no callbacks will be triggered. If a verification request <em>is currently in progress</em>,
/// either the onError or onUserVerified callbacks will be triggered, depending on whether the code is correct.
///
/// \param pinCode a string containing the pin code to check.
+ (void)checkPinCode:(NSString * _Nonnull)pinCode;

/// Check whether a pin code (ususally entered by the user) is the correct verification code. A verification attempt does not need to be in progress to call this command. This is useful in the case that an App is restarted before the verification is complete.
///
/// Note: This version of the command should only be used in cases where an app may restart before verification is complete. Then you have the opportunity to continue with the verification process by calling this function with the appropriate parameters.
///
/// \param pinCode a string containing the pin code to check.
///
/// \param countryCode The ISO 3166 alpha-2 country code for the specified number
///
/// \param number Mobile number to verify
///
/// \param onUserVerified Callback which is executed when a user is verified
///
/// \param onError Callback which is executed when an error occurs
+ (void)checkPinCode:(NSString * _Nonnull)pinCode WithCountryCode:(NSString * _Nullable)countryCode WithNumber:(NSString * _Nonnull)number verifyInProgressBlock:(void (^ _Nonnull)(void))onUserVerified errorBlock:(void (^ _Nonnull)(enum VerifyError))onError;

/// Cancel the ongoing verification request - if one exists
///
/// \param completionBlock A callback which is invoked when the cancel request completes or fails (with an NSError)
+ (void)cancelVerificationWithBlock:(void (^ _Nonnull)(NSError * _Nullable))completionBlock;

/// Begins the next stage of the verification workflow.
///
/// For example having an (SMS)->TTS->TTS and being in the SMS stage,
/// invoking this function will move the verification stage onto the first TTS stage:
/// SMS->(TTS)->TTS.
///
/// \param completionBlock A callback which is invoked when the 'next event'
/// request completes or fails (with an NSError)
+ (void)triggerNextEventWithBlock:(void (^ _Nonnull)(NSError * _Nullable))completionBlock;

/// Log's out the current user - if they have already been verified. To log out a user is to assume them unverified again.
///
/// \param number The user's phone number
///
/// \param completionBlock A callback which is invoked when the logout
/// request completes of fails (with an NSError)
+ (void)logoutUserWithCountryCode:(NSString * _Nullable)countryCode WithNumber:(NSString * _Nonnull)number WithBlock:(void (^ _Nonnull)(NSError * _Nullable))completionBlock;

/// Returns the verification status of a given user.
///
/// This can be one of:
///
/// <code>*verified*
///     The user has been successfully verified.
/// 
/// *pending*
///     A verification request for this user 
///     is currently in progress.
/// 
/// *new*
///     This user just been created on the SDK service
/// 
/// *failed*
///     A previous verification request for this
///     user has failed.
/// 
/// *expired*
///     A previous verification request for this
///     user expired.
/// 
/// *unverified*
///     A user's verified status has been revoked,
///     possibly due to timeout.
/// 
/// *blacklisted*
///     This user has failed too many verification
///     requests and is therefore blacklisted.
/// 
/// *error*
///     An error ocurred during the last verification
///     attempt for this user.
/// 
/// *unknown*
///     The user is unknown to the SDK service.
/// 
/// </code>
/// \param completionBlock A callback which is invoked when the logout request
/// completes or fails (with an NSError)
+ (void)getUserStatusWithCountryCode:(NSString * _Nullable)countryCode WithNumber:(NSString * _Nonnull)number WithBlock:(void (^ _Nonnull)(NSString * _Nullable, NSError * _Nullable))completionBlock;

/// Filters Nexmo Verify push notifications and returns the verify pin code where possible.
///
/// \param userInfo The push data passed in through UIApplicationDelegate's
/// application:didReceiveRemoteNotification: function.
///
/// \param performSilentCheck if true, Nexmo Verify SDK will complete the verification request
/// automatically, which verifies the user.
+ (BOOL)handleNotificationWithUserInfo:(NSDictionary * _Nonnull)userInfo performSilentCheck:(BOOL)performSilentCheck;
+ (void)verifyStandaloneWithCountryCode:(NSString * _Nullable)countryCode phoneNumber:(NSString * _Nonnull)phoneNumber verifyInProgressBlock:(void (^ _Nonnull)(void))onVerifyInProgress userVerifiedBlock:(void (^ _Nonnull)(void))onUserVerified errorBlock:(void (^ _Nonnull)(enum VerifyError))onError;
+ (void)beginManagedVerificationWithMessage:(NSString * _Nonnull)message withDelegate:(id <VerifyUIDelegate> _Nonnull)delegate;
@end


/// Possible error responses which may be returned from verify services
typedef SWIFT_ENUM(NSInteger, VerifyError) {

/// There is already a pending verification in progress. Handle {@link VerifyClientListener} events to check the progress.
  VerifyErrorVERIFICATION_ALREADY_STARTED = 1,

/// Number is invalid. Either: 1. Number is missing or not a real number (in international or local format). 2. Cannot route any verification messages to this number.
  VerifyErrorINVALID_NUMBER = 2,
  VerifyErrorNUMBER_REQUIRED = 3,

/// User must be in pending status to be able to perform a PIN check.
  VerifyErrorCANNOT_PERFORM_CHECK = 4,

/// Missing or invalid PIN code supplied.
  VerifyErrorINVALID_PIN_CODE = 5,

/// Ongoing verification has failed. A wrong PIN code was provided too many times.
  VerifyErrorINVALID_CODE_TOO_MANY_TIMES = 6,

/// Ongoing verification expired. Need to start verify again.
  VerifyErrorUSER_EXPIRED = 7,

/// Ongoing verification rejected. User blacklisted for verification.
  VerifyErrorUSER_BLACKLISTED = 8,

/// Throttled. Too many failed requests.
  VerifyErrorTHROTTLED = 9,

/// Your account does not have sufficient credit to process this request.
  VerifyErrorQUOTA_EXCEEDED = 10,

/// Invalid Credentials. Either:
///
/// <ol><li>Supplied Application ID may not be listed under your accepted application list.</li><li>Shared secret key is invalid.</li></ol>
  VerifyErrorINVALID_CREDENTIALS = 11,

/// The SDK revision is not supported anymore.
  VerifyErrorSDK_REVISION_NOT_SUPPORTED = 12,

/// Current iOS OS version is not supported.
  VerifyErrorOS_NOT_SUPPORTED = 13,

/// Generic internal error, the service might be down for the moment. Please try again later.
  VerifyErrorINTERNAL_ERROR = 14,

/// This Nexmo Account has been barred from sending messages
  VerifyErrorACCOUNT_BARRED = 15,

/// Having problems accessing the network
  VerifyErrorNETWORK_ERROR = 16,
};


SWIFT_PROTOCOL("_TtP12VerifyIosSdk16VerifyUIDelegate_")
@protocol VerifyUIDelegate

/// Variable holds the outcome of a verification attempt once completed
@property (nonatomic) BOOL verificationSuccessful;
@optional

/// Called once a verification attempt has terminated, with the result of the verification
- (void)userVerified:(BOOL)verified;
@end

#pragma clang diagnostic pop
